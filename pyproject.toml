[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ultra-ai-project"
version = "1.0.0"
description = "A comprehensive AI orchestration platform with multi-agent capabilities"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Ultra AI Team", email = "team@ultra-ai-project.com"}
]
maintainers = [
    {name = "Ultra AI Team", email = "team@ultra-ai-project.com"}
]
keywords = [
    "ai",
    "artificial-intelligence", 
    "machine-learning",
    "agents",
    "orchestration",
    "automation",
    "llm",
    "gpt",
    "claude",
    "huggingface"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Framework :: AsyncIO",
    "Framework :: FastAPI",
]
requires-python = ">=3.8"
dependencies = [
    # Core dependencies
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    
    # Async and concurrency
    "asyncio-mqtt>=0.16.0",
    "aiofiles>=23.2.0",
    "aiohttp>=3.8.0",
    "aioredis>=2.0.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "asyncpg>=0.28.0",
    
    # AI and ML
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "transformers>=4.35.0",
    "torch>=2.1.0",
    "sentence-transformers>=2.2.0",
    "huggingface-hub>=0.17.0",
    
    # Data processing
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    
    # Web and API
    "httpx>=0.25.0",
    "websockets>=11.0.0",
    "python-multipart>=0.0.6",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    
    # Configuration and logging
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",
    "structlog>=23.2.0",
    "rich>=13.6.0",
    
    # Utilities
    "click>=8.1.0",
    "typer>=0.9.0",
    "tqdm>=4.66.0",
    "jinja2>=3.1.0",
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    "croniter>=1.4.0",
    
    # File handling
    "pillow>=10.0.0",
    "python-magic>=0.4.27",
    "chardet>=5.2.0",
    
    # Security
    "cryptography>=41.0.0",
    "bcrypt>=4.0.0",
    "pyotp>=2.9.0",
    
    # Monitoring and observability
    "prometheus-client>=0.17.0",
    "psutil>=5.9.0",
    
    # Caching
    "redis>=5.0.0",
    "diskcache>=5.6.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "coverage>=7.3.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.6.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.4.0",
    "tox>=4.11.0",
]

# Documentation dependencies
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
    "sphinx-copybutton>=0.5.0",
    "sphinx-autobuild>=2021.3.14",
]

# Production dependencies
prod = [
    "gunicorn>=21.2.0",
    "gevent>=23.7.0",
    "supervisor>=4.2.0",
    "nginx>=1.0.0",  # Note: This is a placeholder, nginx is typically installed via system package manager
]

# Cloud deployment dependencies
cloud = [
    "boto3>=1.29.0",
    "google-cloud-storage>=2.10.0",
    "azure-storage-blob>=12.19.0",
    "kubernetes>=27.2.0",
    "docker>=6.1.0",
]

# Data science and analytics
analytics = [
    "jupyter>=1.0.0",
    "ipython>=8.15.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.17.0",
    "streamlit>=1.27.0",
]

# Performance and optimization
performance = [
    "uvloop>=0.17.0",
    "orjson>=3.9.0",
    "msgpack>=1.0.0",
    "lz4>=4.3.0",
    "cython>=3.0.0",
]

# All optional dependencies
all = [
    "ultra-ai-project[dev,docs,prod,cloud,analytics,performance]"
]

[project.urls]
Homepage = "https://github.com/ultra-ai/ultra-ai-project"
Documentation = "https://ultra-ai-project.readthedocs.io"
Repository = "https://github.com/ultra-ai/ultra-ai-project.git"
"Bug Tracker" = "https://github.com/ultra-ai/ultra-ai-project/issues"
Changelog = "https://github.com/ultra-ai/ultra-ai-project/blob/main/CHANGELOG.md"
Discussions = "https://github.com/ultra-ai/ultra-ai-project/discussions"

[project.scripts]
ultra-ai = "src.main:main"
ultra-ai-cli = "src.ui.cli_interface:main"
ultra-ai-server = "src.main:run_server"
ultra-ai-worker = "src.worker:main"
ultra-ai-migrate = "src.database.migrations:main"

[project.gui-scripts]
ultra-ai-gui = "src.ui.desktop:main"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
"src.ui" = ["templates/*", "static/*"]
"src.config" = ["*.yaml", "*.json"]
"src.database" = ["migrations/*"]

# Black code formatting
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["src", "tests"]
known_third_party = [
    "fastapi",
    "pydantic",
    "sqlalchemy",
    "openai",
    "anthropic",
    "transformers",
    "torch",
    "numpy",
    "pandas"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# MyPy static type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
show_error_codes = true
show_column_numbers = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_equality = true

# Per-module options
[[tool.mypy.overrides]]
module = [
    "openai.*",
    "anthropic.*",
    "transformers.*",
    "torch.*",
    "uvicorn.*",
    "redis.*",
    "psutil.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "requires_api_keys: Tests that require API keys",
    "requires_gpu: Tests that require GPU",
    "requires_internet: Tests that require internet connection",
    "performance: Performance benchmarking tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "venv", "env", ".venv", ".env"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_possible for tests

# Safety dependency checking
[tool.safety]
# Ignore specific vulnerabilities (update as needed)
ignore = []

# Flake8 configuration (in setup.cfg format since flake8 doesn't support pyproject.toml)
# This would typically go in setup.cfg or .flake8 file

# Ruff linting (alternative to flake8)
[tool.ruff]
target-version = "py38"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W503",  # line break before binary operator
]
unfixable = ["B"]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]  # Allow unused arguments and assert statements in tests
"src/migrations/**/*" = ["ARG"]  # Allow unused arguments in migrations

[tool.ruff.isort]
known-first-party = ["src", "tests"]

# Tox testing environments
[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38,py39,py310,py311,py312,lint,security,docs
isolated_build = True

[testenv]
deps = .[dev]
commands = pytest {posargs}

[testenv:lint]
deps = 
    black
    isort
    flake8
    mypy
commands = 
    black --check src tests
    isort --check-only src tests
    flake8 src tests
    mypy src

[testenv:security]
deps = 
    bandit
    safety
commands = 
    bandit -r src
    safety check

[testenv:docs]
deps = .[docs]
commands = 
    sphinx-build -W -b html docs docs/_build/html

[testenv:performance]
deps = .[dev,performance]
commands = pytest -m "performance" {posargs}

[testenv:integration]
deps = .[dev]
commands = pytest -m "integration" {posargs}

[testenv:e2e]
deps = .[dev]
commands = pytest -m "e2e" {posargs}
"""

# Pre-commit configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
            {id = "debug-statements"},
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.9.1",
        hooks = [
            {id = "black"}
        ]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [
            {id = "isort"}
        ]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0",
        hooks = [
            {id = "flake8"}
        ]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.6.1",
        hooks = [
            {id = "mypy", additional_dependencies = ["types-all"]}
        ]
    },
    {
        repo = "https://github.com/PyCQA/bandit",
        rev = "1.7.5",
        hooks = [
            {id = "bandit", args = ["-c", "pyproject.toml"]}
        ]
    }
]

# Task runner configuration (using taskipy)
[tool.taskipy.tasks]
# Development tasks
dev = "uvicorn src.main:app --reload --host 0.0.0.0 --port 8000"
test = "pytest"
test-cov = "pytest --cov=src --cov-report=html"
test-unit = "pytest -m unit"
test-integration = "pytest -m integration"
test-e2e = "pytest -m e2e"
test-performance = "pytest -m performance"

# Code quality tasks
lint = "black --check src tests && isort --check-only src tests && flake8 src tests && mypy src"
format = "black src tests && isort src tests"
security = "bandit -r src && safety check"
clean = "find . -type d -name __pycache__ -delete && find . -name '*.pyc' -delete"

# Documentation tasks
docs = "sphinx-build -W -b html docs docs/_build/html"
docs-serve = "sphinx-autobuild docs docs/_build/html"

# Database tasks
migrate = "python -m src.database.migrations"
db-init = "python src/main.py --init-db"
db-reset = "python src/main.py --reset-db"

# Deployment tasks
build = "python -m build"
install = "pip install -e ."
install-dev = "pip install -e .[dev]"

# Docker tasks
docker-build = "docker build -t ultra-ai:latest ."
docker-run = "docker run -p 8000:8000 ultra-ai:latest"
docker-compose-up = "docker-compose up -d"
docker-compose-down = "docker-compose down"

# Utility tasks
requirements = "pip-compile requirements.in"
requirements-dev = "pip-compile requirements-dev.in"
check-outdated = "pip list --outdated"

# Environment variables for development
[tool.taskipy.variables]
ENVIRONMENT = "development"
DEBUG = "true"
LOG_LEVEL = "DEBUG"

# Semantic versioning configuration
[tool.semantic_release]
version_variable = [
    "src/__init__.py:__version__",
    "pyproject.toml:version"
]
branch = "main"
upload_to_pypi = false
upload_to_release = true
build_command = "python -m build"

# Performance profiling configuration
[tool.py-spy]
rate = 100
duration = 30
output = "profile.svg"
format = "flamegraph"

# Dependency management
[tool.pip-tools]
generate-hashes = true
upgrade = true
annotate = true

# Configuration for different environments
[tool.ultra-ai]
# This section can contain application-specific configuration
default_agent_timeout = 300
max_concurrent_tasks = 100
log_retention_days = 30

[tool.ultra-ai.development]
debug = true
log_level = "DEBUG"
auto_reload = true
enable_profiling = true

[tool.ultra-ai.production]
debug = false
log_level = "INFO"
auto_reload = false
enable_profiling = false
worker_processes = 4

[tool.ultra-ai.testing]
debug = true
log_level = "DEBUG"
use_test_database = true
mock_external_apis = true
